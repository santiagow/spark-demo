buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
  }
}

group = 'com.santiagow'
version = '0.0.1-SNAPSHOT'

apply plugin: 'scala'
// for gradle 3.*
ScalaCompileOptions.metaClass.daemonServer = true
ScalaCompileOptions.metaClass.fork = true
ScalaCompileOptions.metaClass.useAnt = false
ScalaCompileOptions.metaClass.useCompileDaemon = false

apply plugin: 'eclipse'
apply plugin: 'idea'

repositories {
  mavenLocal()
  mavenCentral()
  jcenter()
}

configurations {
  spark
  compile.extendsFrom spark
}

def sparkVersion = '2.1.0'

dependencies {
  compile 'org.scala-lang:scala-compiler:2.11.8'
  compile 'org.scala-lang:scala-library:2.11.8'

  // compileOnly like provided in maven
  spark group: 'org.apache.spark', name: 'spark-core_2.11', version: sparkVersion
  spark group: 'org.apache.spark', name: 'spark-sql_2.11', version: sparkVersion
  spark group: 'org.apache.spark', name: 'spark-streaming_2.11', version: sparkVersion
  spark group: 'org.apache.spark', name: 'spark-mllib_2.11', version: sparkVersion

  compile group: 'mysql', name: 'mysql-connector-java', version: '6.0.5'

  compile group: 'org.yaml', name: 'snakeyaml', version: '1.17'
  compile group: 'com.alibaba', name: 'fastjson', version: '1.2.33'

  testCompile 'org.testng:testng:6.9.10'
  testCompile 'org.scalatest:scalatest_2.11:3.0.0'
  testRuntime 'org.scala-lang.modules:scala-xml_2.11:1.0.5'

  // use local jar files
  //compile fileTree(dir: 'libs', include: '*.jar')
  //compile files('libs/jedis-2.9.0.jar')
}

//sourceCompatibility = 1.8
//targetCompatibility = 1.8

sourceSets.main.scala.srcDir "src/main/scala"

//create a single Jar with all dependencies
task fatJar(type: Jar) {
  manifest {
    attributes 'Main-Class': 'com.santiago.spark.App'
  }
  baseName = project.name + '-all'
  from {
    // configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    (configurations.compile - configurations.spark).collect {
      it.isDirectory() ? it : zipTree(it)
    }
  }
  zip64 true
  with jar
}

task run(type: JavaExec, dependsOn: classes) {
  main = 'Main'
  classpath sourceSets.main.runtimeClasspath
  classpath configurations.runtime
}

task cleanPj(type: Delete) {
  delete 'build', 'target'
}

task release(type: Copy, dependsOn: [cleanPj, fatJar]) {
  from('build/libs') {
    include '*.jar'
  }
  into('target')
}

